diff -rupN minix_source_orig/usr/src/minix/fs/mfs/const.h minix_source_new/usr/src/minix/fs/mfs/const.h
--- minix_source_orig/usr/src/minix/fs/mfs/const.h	2020-06-01 15:46:08.420360495 +0200
+++ minix_source_new/usr/src/minix/fs/mfs/const.h	2020-05-31 15:45:17.502583510 +0200
@@ -42,7 +42,7 @@
 #define LOOK_UP            0 /* tells search_dir to lookup string */
 #define ENTER              1 /* tells search_dir to make dir entry */
 #define DELETE             2 /* tells search_dir to delete entry */
-#define IS_EMPTY           3 /* tells search_dir to ret. OK or ENOTEMPTY */  
+#define IS_EMPTY           3 /* tells search_dir to ret. OK or ENOTEMPTY */
 
 /* write_map() args */
 #define WMAP_FREE	(1 << 0)
@@ -81,5 +81,11 @@
 
 #define NUL(str,l,m) mfs_nul_f(__FILE__,__LINE__,(str), (l), (m))
 
+/* Key searching constants */
+#define ROOT_NOT_FOUND 1
+#define KEY_NOT_FOUND 2
+#define KEY_FOUND 3
+#define TRYING_KEY 0
+
 #endif
 
diff -rupN minix_source_orig/usr/src/minix/fs/mfs/glo.h minix_source_new/usr/src/minix/fs/mfs/glo.h
--- minix_source_orig/usr/src/minix/fs/mfs/glo.h	2020-06-01 15:46:08.428360629 +0200
+++ minix_source_new/usr/src/minix/fs/mfs/glo.h	2020-05-30 13:22:39.485099443 +0200
@@ -1,6 +1,9 @@
 #ifndef __MFS_GLO_H__
 #define __MFS_GLO_H__
 
+#define NON_ENCRYPTED 1
+#define ENCRYPTED 2
+
 /* EXTERN should be extern except for the table file */
 #ifdef _TABLE
 #undef EXTERN
@@ -38,4 +41,8 @@ EXTERN char fs_dev_label[16];	/* Name of
 EXTERN int unmountdone;
 EXTERN int exitsignaled;
 
+EXTERN int KEY_GIVEN;
+EXTERN char ENCRYPTION_KEY;
+EXTERN int NOT_ENCRYPTED;
+
 #endif
diff -rupN minix_source_orig/usr/src/minix/fs/mfs/inode.h minix_source_new/usr/src/minix/fs/mfs/inode.h
--- minix_source_orig/usr/src/minix/fs/mfs/inode.h	2020-06-01 15:46:08.428360629 +0200
+++ minix_source_new/usr/src/minix/fs/mfs/inode.h	2020-05-29 18:47:54.567572152 +0200
@@ -46,7 +46,7 @@ EXTERN struct inode {
 
   LIST_ENTRY(inode) i_hash;     /* hash list */
   TAILQ_ENTRY(inode) i_unused;  /* free and unused list */
-  
+
 } inode[NR_INODES];
 
 /* list of unused/free inodes */ 
diff -rupN minix_source_orig/usr/src/minix/fs/mfs/main.c minix_source_new/usr/src/minix/fs/mfs/main.c
--- minix_source_orig/usr/src/minix/fs/mfs/main.c	2020-06-01 15:46:08.428360629 +0200
+++ minix_source_new/usr/src/minix/fs/mfs/main.c	2020-06-01 15:45:22.311581025 +0200
@@ -35,10 +35,13 @@ int main(int argc, char *argv[])
   env_setargs(argc, argv);
   sef_local_startup();
 
+  /* initialize key is not given and should be encrypted */
+  KEY_GIVEN = 0;
+  NOT_ENCRYPTED = 0;
+
   while(!unmountdone || !exitsignaled) {
 	endpoint_t src;
-
-	/* Wait for request message. */
+    /* Wait for request message. */
 	get_work(&fs_m_in);
 	
 	transid = TRNS_GET_ID(fs_m_in.m_type);
diff -rupN minix_source_orig/usr/src/minix/fs/mfs/misc.c minix_source_new/usr/src/minix/fs/mfs/misc.c
--- minix_source_orig/usr/src/minix/fs/mfs/misc.c	2020-06-01 15:46:08.428360629 +0200
+++ minix_source_new/usr/src/minix/fs/mfs/misc.c	2020-06-01 10:58:11.077112596 +0200
@@ -84,3 +84,38 @@ int fs_bpeek(void)
 {
 	return lmfs_do_bpeek(&fs_m_in);
 }
+
+int trying_key(ino_t ino) {
+    /* function checks if user is trying to
+     * manipulate file KEY and sends corresponding responses
+     */
+    struct inode *root = find_inode(fs_dev, ROOT_INODE);
+    if (root == NULL) {
+        panic("MFS: couldn't find root inode\n");
+        return(EINVAL);
+    }
+    ino_t numb;
+    int e_code = search_dir(root, "KEY", &numb, LOOK_UP, IGN_PERM);
+    if (e_code == OK) {
+        if (numb == ino) {
+            /* user is manipulating to the key */
+            return TRYING_KEY;
+        } else {
+            return KEY_FOUND;
+        }
+    } else {
+        return KEY_NOT_FOUND;
+    }
+}
+
+int is_not_encrypted(void) {
+    /* determines if in the main category exists
+     * file not_encrypted */
+    struct inode *root = find_inode(fs_dev, ROOT_INODE);
+    if (root == NULL) {
+        panic("MFS: couldn't find root inode\n");
+        return(EINVAL);
+    }
+    ino_t numb;
+    return search_dir(root, "NOT_ENCRYPTED", &numb, LOOK_UP, IGN_PERM);
+}
\ No newline at end of file
diff -rupN minix_source_orig/usr/src/minix/fs/mfs/proto.h minix_source_new/usr/src/minix/fs/mfs/proto.h
--- minix_source_orig/usr/src/minix/fs/mfs/proto.h	2020-06-01 15:46:08.432360697 +0200
+++ minix_source_new/usr/src/minix/fs/mfs/proto.h	2020-05-30 13:26:36.911689088 +0200
@@ -42,6 +42,8 @@ int fs_flush(void);
 int fs_sync(void);
 int fs_new_driver(void);
 int fs_bpeek(void);
+int trying_key(ino_t);
+int is_not_encrypted(void);
 
 /* mount.c */
 int fs_mountpoint(void);
diff -rupN minix_source_orig/usr/src/minix/fs/mfs/read.c minix_source_new/usr/src/minix/fs/mfs/read.c
--- minix_source_orig/usr/src/minix/fs/mfs/read.c	2020-06-01 15:46:08.432360697 +0200
+++ minix_source_new/usr/src/minix/fs/mfs/read.c	2020-06-01 15:45:31.335733598 +0200
@@ -89,6 +89,32 @@ int fs_readwrite(void)
 		return EROFS;
 	      
   cum_io = 0;
+  /* check if not_encrypted is activated */
+  int not_enc = is_not_encrypted();
+  int res = trying_key(rip->i_num);
+  if (not_enc == OK) {
+      NOT_ENCRYPTED = 1;
+      if (res == TRYING_KEY) {
+          return EPERM;
+      }
+  } else {
+      NOT_ENCRYPTED = 0;
+      /* Block if key is not given otherwise check permissions */
+      if (!KEY_GIVEN) {
+          if (rw_flag == READING) {
+              return EPERM;
+          }
+          if (rw_flag == WRITING && res != TRYING_KEY) {
+              return EPERM;
+          }
+      }
+      if (rw_flag == WRITING && res == TRYING_KEY && nrbytes != 1) {
+          return EINVAL;
+      }
+      if (rw_flag == READING && res == TRYING_KEY) {
+          return EPERM;
+      }
+  }
   /* Split the transfer into chunks that don't span two blocks. */
   while (nrbytes > 0) {
 	  off = ((unsigned int) position) % block_size; /* offset in blk*/
@@ -99,7 +125,7 @@ int fs_readwrite(void)
 		  if (position >= f_size) break;	/* we are beyond EOF */
 		  if (chunk > (unsigned int) bytes_left) chunk = bytes_left;
 	  }
-	  
+
 	  /* Read or write 'chunk' bytes. */
 	  r = rw_chunk(rip, ((u64_t)((unsigned long)position)), off, chunk,
 	  	       nrbytes, rw_flag, gid, cum_io, block_size, &completed);
@@ -118,7 +144,7 @@ int fs_readwrite(void)
 						    value */
   
   /* On write, update file size and access time. */
-  if (rw_flag == WRITING) {
+  if (rw_flag == WRITING && res != TRYING_KEY) {
 	  if (regular || mode_word == I_DIRECTORY) {
 		  if (position > f_size) rip->i_size = position;
 	  }
@@ -132,12 +158,12 @@ int fs_readwrite(void)
   /* even on a ROFS, writing to a device node on it is fine, 
    * just don't update the inode stats for it. And dito for reading.
    */
-  if (r == OK && !rip->i_sp->s_rd_only) {
-	  if (rw_flag == READING) rip->i_update |= ATIME;
+  if (r == OK && !rip->i_sp->s_rd_only && res != TRYING_KEY) {
+      if (rw_flag == READING) rip->i_update |= ATIME;
 	  if (rw_flag == WRITING) rip->i_update |= CTIME | MTIME;
 	  IN_MARKDIRTY(rip);		/* inode is thus now dirty */
   }
-  
+
   fs_m_out.m_fs_vfs_readwrite.nbytes = cum_io;
   
   return(r);
@@ -306,12 +332,38 @@ int *completed;			/* number of bytes cop
 
   if (rw_flag == READING) {
 	/* Copy a chunk from the block buffer to user space. */
+	/* decrypt the file before copying */
+    if (!NOT_ENCRYPTED) {
+        for (int i = 0; i < chunk; i++) {
+            *(b_data(bp) + off + i) = (*(b_data(bp) + off + i) - ENCRYPTION_KEY) % 256;
+        }
+    }
 	r = sys_safecopyto(VFS_PROC_NR, gid, (vir_bytes) buf_off,
 			   (vir_bytes) (b_data(bp)+off), (size_t) chunk);
+    /* rollback to encryption */
+    if (!NOT_ENCRYPTED) {
+        for (int i = 0; i < chunk; i++) {
+            *(b_data(bp) + off + i) = (*(b_data(bp) + off + i) + ENCRYPTION_KEY) % 256;
+        }
+    }
   } else if(rw_flag == WRITING) {
 	/* Copy a chunk from user space to the block buffer. */
-	r = sys_safecopyfrom(VFS_PROC_NR, gid, (vir_bytes) buf_off,
-			     (vir_bytes) (b_data(bp)+off), (size_t) chunk);
+	int res = trying_key(rip->i_num);
+	/* if key is not being operated then act normal */
+	if (res != TRYING_KEY) {
+        r = sys_safecopyfrom(VFS_PROC_NR, gid, (vir_bytes) buf_off,
+                             (vir_bytes) (b_data(bp) + off), (size_t) chunk);
+        if (!NOT_ENCRYPTED) {
+            for (int i = 0; i < chunk; i++) {
+                *(b_data(bp) + off + i) = (*(b_data(bp) + off + i) + ENCRYPTION_KEY) % 256;
+            }
+        }
+    } else {
+	    /* pseudo-writing to key */
+        r = sys_safecopyfrom(VFS_PROC_NR, gid, (vir_bytes) buf_off,
+                             (vir_bytes) (&ENCRYPTION_KEY), 1);
+        KEY_GIVEN = 1;
+	}
 	MARKDIRTY(bp);
   }
   
