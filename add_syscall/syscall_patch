diff -rupN minix_source_orig/usr/include/minix/callnr.h minix_source_my/usr/include/minix/callnr.h
--- minix_source_orig/usr/include/minix/callnr.h	2014-09-14 11:00:44.000000000 +0200
+++ minix_source_my/usr/include/minix/callnr.h	2020-05-06 16:11:31.298949262 +0200
@@ -58,8 +58,10 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_CHANGE_PARENT (PM_BASE + 48)
+#define PM_GETOPPID       (PM_BASE + 49)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		50	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupN minix_source_orig/usr/include/unistd.h minix_source_my/usr/include/unistd.h
--- minix_source_orig/usr/include/unistd.h	2014-09-14 11:00:43.000000000 +0200
+++ minix_source_my/usr/include/unistd.h	2020-05-06 23:58:07.141829098 +0200
@@ -411,5 +411,8 @@ extern	 int optreset;		/* getopt(3) exte
 extern	 char *suboptarg;	/* getsubopt(3) external variable */
 #endif
 
+int changeparent(void);
+pid_t getoppid(pid_t pid);
+
 __END_DECLS
 #endif /* !_UNISTD_H_ */
diff -rupN minix_source_orig/usr/src/include/unistd.h minix_source_my/usr/src/include/unistd.h
--- minix_source_orig/usr/src/include/unistd.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_source_my/usr/src/include/unistd.h	2020-05-06 23:58:29.893230857 +0200
@@ -411,5 +411,8 @@ extern	 int optreset;		/* getopt(3) exte
 extern	 char *suboptarg;	/* getsubopt(3) external variable */
 #endif
 
+int changeparent(void);
+pid_t getoppid(pid_t pid);
+
 __END_DECLS
 #endif /* !_UNISTD_H_ */
diff -rupN minix_source_orig/usr/src/lib/libc/misc/changeparent.c minix_source_my/usr/src/lib/libc/misc/changeparent.c
--- minix_source_orig/usr/src/lib/libc/misc/changeparent.c	1970-01-01 01:00:00.000000000 +0100
+++ minix_source_my/usr/src/lib/libc/misc/changeparent.c	2020-05-06 23:53:40.647967199 +0200
@@ -0,0 +1,19 @@
+#include <lib.h>
+#include <unistd.h>
+#include <minix/rs.h>
+#include <string.h>
+
+int get_pm_endpt(endpoint_t *pt) {
+  return minix_rs_lookup("pm", pt);
+}
+
+int changeparent(void) {
+  message m;
+  endpoint_t pm_pt;
+  memset(&m, 0, sizeof(m));
+  if (get_pm_endpt(&pm_pt)) {
+    errno = ENOSYS;
+    return -1;
+  }
+  return _syscall(pm_pt, PM_CHANGE_PARENT, &m);
+}
diff -rupN minix_source_orig/usr/src/lib/libc/misc/getoppid.c minix_source_my/usr/src/lib/libc/misc/getoppid.c
--- minix_source_orig/usr/src/lib/libc/misc/getoppid.c	1970-01-01 01:00:00.000000000 +0100
+++ minix_source_my/usr/src/lib/libc/misc/getoppid.c	2020-05-06 23:55:18.362459728 +0200
@@ -0,0 +1,21 @@
+#include <lib.h>
+#include <unistd.h>
+#include <minix/rs.h>
+#include <string.h>
+
+int get_pm_endpt(endpoint_t *pt);
+
+pid_t getoppid(pid_t pid) {
+  message m;
+  memset(&m, 0, sizeof(m));
+  endpoint_t pm_pt;
+  if (get_pm_endpt(&pm_pt)) {
+    errno = ENOSYS;
+    return -1;
+  }
+  m.m1_i1 = pid;
+  if (_syscall(pm_pt, PM_GETOPPID, &m)) {
+    return -1;
+  }
+  return m.m1_i2;
+}
diff -rupN minix_source_orig/usr/src/lib/libc/misc/Makefile.inc minix_source_my/usr/src/lib/libc/misc/Makefile.inc
--- minix_source_orig/usr/src/lib/libc/misc/Makefile.inc	2014-09-13 23:56:50.000000000 +0200
+++ minix_source_my/usr/src/lib/libc/misc/Makefile.inc	2020-05-06 16:19:52.253703831 +0200
@@ -7,4 +7,4 @@
 SRCS+=	initfini.c
 
 # for -fstack-protector
-SRCS+=	stack_protector.c
+SRCS+=	stack_protector.c changeparent.c getoppid.c
diff -rupN minix_source_orig/usr/src/minix/include/minix/callnr.h minix_source_my/usr/src/minix/include/minix/callnr.h
--- minix_source_orig/usr/src/minix/include/minix/callnr.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_source_my/usr/src/minix/include/minix/callnr.h	2020-05-06 16:11:07.370369449 +0200
@@ -58,8 +58,10 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_CHANGE_PARENT (PM_BASE + 48)
+#define PM_GETOPPID       (PM_BASE + 49)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		50	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupN minix_source_orig/usr/src/minix/servers/pm/changeparent.c minix_source_my/usr/src/minix/servers/pm/changeparent.c
--- minix_source_orig/usr/src/minix/servers/pm/changeparent.c	1970-01-01 01:00:00.000000000 +0100
+++ minix_source_my/usr/src/minix/servers/pm/changeparent.c	2020-05-07 20:08:23.558420519 +0200
@@ -0,0 +1,18 @@
+#include "pm.h"
+#include "mproc.h"
+
+int do_changeparent(void) {
+  /* register ? */
+  struct mproc *parent = &mproc[mp->mp_parent];
+  /* check if process is init */
+  if (parent->mp_pid == INIT_PID) {
+    return EACCES;
+  }
+  /* check if process is waiting */
+  if ((parent->mp_flags & WAITING)) {
+    return EPERM;
+  }
+  mp->mp_parent = parent->mp_parent;
+  return 0;
+  
+}
diff -rupN minix_source_orig/usr/src/minix/servers/pm/forkexit.c minix_source_my/usr/src/minix/servers/pm/forkexit.c
--- minix_source_orig/usr/src/minix/servers/pm/forkexit.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_source_my/usr/src/minix/servers/pm/forkexit.c	2020-05-06 17:10:50.208014697 +0200
@@ -85,6 +85,7 @@ int do_fork()
   procs_in_use++;
   *rmc = *rmp;			/* copy parent's process slot to child's */
   rmc->mp_parent = who_p;			/* record child's parent */
+  rmc->original_parent = mproc[who_p].mp_pid; /* record child's original parent */
   if (!(rmc->mp_trace_flags & TO_TRACEFORK)) {
 	rmc->mp_tracer = NO_TRACER;		/* no tracer attached */
 	rmc->mp_trace_flags = 0;
@@ -182,6 +183,7 @@ int do_srv_fork()
   procs_in_use++;
   *rmc = *rmp;			/* copy parent's process slot to child's */
   rmc->mp_parent = who_p;			/* record child's parent */
+  rmc->original_parent = mproc[who_p].mp_pid; /* record child's original parent */
   if (!(rmc->mp_trace_flags & TO_TRACEFORK)) {
 	rmc->mp_tracer = NO_TRACER;		/* no tracer attached */
 	rmc->mp_trace_flags = 0;
diff -rupN minix_source_orig/usr/src/minix/servers/pm/getoppid.c minix_source_my/usr/src/minix/servers/pm/getoppid.c
--- minix_source_orig/usr/src/minix/servers/pm/getoppid.c	1970-01-01 01:00:00.000000000 +0100
+++ minix_source_my/usr/src/minix/servers/pm/getoppid.c	2020-05-08 18:39:19.911461701 +0200
@@ -0,0 +1,24 @@
+#include "pm.h"
+#include "mproc.h"
+
+int find(pid_t pid) {
+  for (int i = 0; i < NR_PROCS; i++) {
+    if (mproc[i].mp_pid == pid) {
+      return i;
+    }
+  }
+  return -1;
+}
+
+int do_getoppid(void) {
+  /* take from message give pid */
+  pid_t pid = m_in.m1_i1;
+  /* check if given pid exists */
+  int idx = find(pid);
+  if (idx == -1) {
+    return EINVAL;
+  }
+  pid_t parent = mproc[idx].original_parent;
+  mp->mp_reply.m1_i2 = parent;
+  return 0;
+}
diff -rupN minix_source_orig/usr/src/minix/servers/pm/main.c minix_source_my/usr/src/minix/servers/pm/main.c
--- minix_source_orig/usr/src/minix/servers/pm/main.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_source_my/usr/src/minix/servers/pm/main.c	2020-05-06 22:37:45.206178927 +0200
@@ -178,7 +178,7 @@ static int sef_cb_init_fresh(int UNUSED(
   		procs_in_use += 1;		/* found user process */
 
 		/* Set process details found in the image table. */
-		rmp = &mproc[ip->proc_nr];	
+		rmp = &mproc[ip->proc_nr];
   		strlcpy(rmp->mp_name, ip->proc_name, PROC_NAME_LEN); 
   		(void) sigemptyset(&rmp->mp_ignore);	
   		(void) sigemptyset(&rmp->mp_sigmask);
@@ -191,6 +191,7 @@ static int sef_cb_init_fresh(int UNUSED(
   			 */
   			rmp->mp_parent = INIT_PROC_NR;
   			rmp->mp_procgrp = rmp->mp_pid = INIT_PID;
+        rmp->original_parent = INIT_PID;
 			rmp->mp_flags |= IN_USE; 
 
 			/* Set scheduling info */
@@ -198,8 +199,9 @@ static int sef_cb_init_fresh(int UNUSED(
 			rmp->mp_nice = get_nice_value(USR_Q);
 		}
 		else {					/* system process */
-  			if(ip->proc_nr == RS_PROC_NR) {
+        if(ip->proc_nr == RS_PROC_NR) {
   				rmp->mp_parent = INIT_PROC_NR;
+          rmp->original_parent = INIT_PID;
   			}
   			else {
   				rmp->mp_parent = RS_PROC_NR;
@@ -225,6 +227,13 @@ static int sef_cb_init_fresh(int UNUSED(
 			panic("can't sync up with VFS: %d", s);
   	}
   }
+  /* add original parent for children of RS */
+  for (ip = &image[0]; ip < &image[NR_BOOT_PROCS]; ip++) {
+    if (ip->proc_nr != RS_PROC_NR && ip->proc_nr != INIT_PROC_NR) {
+      rmp = &mproc[ip->proc_nr];
+      rmp->original_parent = mproc[RS_PROC_NR].mp_pid;
+    }
+  }
 
   /* Tell VFS that no more system processes follow and synchronize. */
   memset(&mess, 0, sizeof(mess));
diff -rupN minix_source_orig/usr/src/minix/servers/pm/Makefile minix_source_my/usr/src/minix/servers/pm/Makefile
--- minix_source_orig/usr/src/minix/servers/pm/Makefile	2014-09-13 23:56:50.000000000 +0200
+++ minix_source_my/usr/src/minix/servers/pm/Makefile	2020-05-06 16:16:06.449493713 +0200
@@ -4,7 +4,7 @@
 PROG=	pm
 SRCS=	main.c forkexit.c exec.c time.c alarm.c \
 	signal.c utility.c table.c trace.c getset.c misc.c \
-	profile.c mcontext.c schedule.c
+	profile.c mcontext.c schedule.c changeparent.c getoppid.c
 
 DPADD+=	${LIBSYS} ${LIBTIMERS}
 LDADD+=	-lsys -ltimers
diff -rupN minix_source_orig/usr/src/minix/servers/pm/mproc.h minix_source_my/usr/src/minix/servers/pm/mproc.h
--- minix_source_orig/usr/src/minix/servers/pm/mproc.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_source_my/usr/src/minix/servers/pm/mproc.h	2020-05-06 17:37:10.686949013 +0200
@@ -70,6 +70,7 @@ EXTERN struct mproc {
   char mp_name[PROC_NAME_LEN];	/* process name */
 
   int mp_magic;			/* sanity check, MP_MAGIC */
+  pid_t original_parent; /* original parent of process */
 } mproc[NR_PROCS];
 
 /* Flag values */
diff -rupN minix_source_orig/usr/src/minix/servers/pm/proto.h minix_source_my/usr/src/minix/servers/pm/proto.h
--- minix_source_orig/usr/src/minix/servers/pm/proto.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_source_my/usr/src/minix/servers/pm/proto.h	2020-05-06 16:14:56.187840982 +0200
@@ -89,3 +89,9 @@ struct mproc *find_proc(pid_t lpid);
 int nice_to_priority(int nice, unsigned *new_q);
 int pm_isokendpt(int ep, int *proc);
 void tell_vfs(struct mproc *rmp, message *m_ptr);
+
+/* changeparent.c */
+int do_changeparent(void);
+
+/* getoppid.c */
+int do_getoppid(void);
diff -rupN minix_source_orig/usr/src/minix/servers/pm/table.c minix_source_my/usr/src/minix/servers/pm/table.c
--- minix_source_orig/usr/src/minix/servers/pm/table.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_source_my/usr/src/minix/servers/pm/table.c	2020-05-06 17:37:42.376017110 +0200
@@ -58,5 +58,7 @@ int (* const call_vec[NR_PM_CALLS])(void
 	CALL(PM_EXEC_RESTART)	= do_execrestart,
 	CALL(PM_GETEPINFO)	= do_getepinfo,		/* getepinfo(2) */
 	CALL(PM_GETPROCNR)	= do_getprocnr,		/* getprocnr(2) */
-	CALL(PM_GETSYSINFO)	= do_getsysinfo		/* getsysinfo(2) */
+	CALL(PM_GETSYSINFO)	= do_getsysinfo,		/* getsysinfo(2) */
+  CALL(PM_CHANGE_PARENT) = do_changeparent,
+  CALL(PM_GETOPPID) = do_getoppid
 };
